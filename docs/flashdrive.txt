Keeping things slightly more secure
-----------------------------------

I want to format and label a USB key, on which I will store my 
super secret ssh key(s) and gpg key(s).

This will be a practical benefit, as it makes the valuable thing a key I generally carry 
with me in my wallet.  

::


  pbrian@falcon:~$ umount /dev/sdc1 
  pbrian@falcon:~$ sudo mkfs.ext4 /dev/sdc -L secretskey
  mke2fs 1.44.1 (24-Mar-2018)
  /dev/sdc contains a iso9660 filesystem labelled 'Ubuntu 16.04.3 LTS amd64'
  Proceed anyway? (y/N) y
  Creating filesystem with 1906176 4k blocks and 476720 inodes
  Filesystem UUID: ed74f120-1736-4f59-8752-06098a635c16
  Superblock backups stored on blocks: 
          32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

  Allocating group tables: done                            
  Writing inode tables: done                            
  Creating journal (16384 blocks): done
  Writing superblocks and filesystem accounting information: done 


Now comes the hard part.  We add the following line to `/etc/fstab`
The UUID we doscovered by running `blkid`. Then the other entries are described below

::
    UUID=ed74f120-1736-4f59-8752-06098a635c16 /home/pbrian/secrets/usb   ext4  user,rw,auto,nofail  0   0

    <mount this drive (if found)>
                                              <onto this mount point>
					                                 <with this FStype>
									 <options will automount it, if it not there wont hang the boot>
                                                                                                    <only boot disks need anuthing but 0 0>


Now when I boot up my machine, and plug in my "secrets" USB key, the
secrets on there (ie my private keys) are available, but the
underlying host OS does not permanently have them.

Now we just need to spin up a Docker instance, with a volume from the above mount point
and my secret private key is then available to me *inside* that docker volume, and so I can
for example, push commits up to github, from my docker instance.

